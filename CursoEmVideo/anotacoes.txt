                    Setters, Getters e Constructor

Setters: setam um objeto por fora, sem termos que colocar diretamente, ou seja nos dá muito mais segurança ex
em vez de:

Caneta c1 = new Caneta();

c1.tampa = 0.5
c1.setTampa(0.5);

Assim podemos setar, criar algo com mais segurança sem o usuário ter acesso direto, a mesma (coisa) servidor para os getters

Getters: retornam o valor de algo:

c1.getTampado = true;

Constructor: construi um padrão, em vez de colocarmos que toda a vez a caneta vem com 100% da tinta, já podemos fazer isso dentro de um construtor.

public Caneta(){ Tem que ter o mesmo nome que a classe
    Caneta.carga = 100;
}

Então toda a vez que iniciarmos uma caneta terá 100% de carga.

c1.constructor(100)


                    Encapsulamento

Encapsulamento é como criar um padrão para algo, por exemplo todos controle remoto tem como diminuir e aumentar volume, então podemos criar um padrão
que sempre cria esses controles. diferente do metódo construtor (metódo construtor toda vez que se instância o objeto ele coloca por padrão o que se está dentro)

Declaração:

public interface NomeDaInterface{
    public abstract metodo();

}

note que como é uma interface ou seja o que vai construir temos que declarar como interface não como class.
Os atributos tem que ser definidos do tipo público e abstratos os metódos tem que ter os seus parenteses e depois o semicolon.

Na Classe:

class NomeDaClasse implements NomeDaInterface{

    @Override
    public void metodo(){

    }
}

Na hora de implementar colocamos o @Override em cima do objeto e depois o declaramos (IDE Geralmente fazem isso por si só)
@Override significa que vamos sobrescrever em cima do metódo abstrato.

Quandos usamos ‘interface’ podemos colocar os metodos get e ‘set’ como private, já que vamos usar os metódos do encapsulamento


Objeto random
import java.util.Random;

Random aleatorio = new Random();
int vencedor = aleatorio.nextInt(3);

vai sortear um número entre 0 e 3, sempre começando em 0 e parando no número que paramos!

Objetos são como variaveis, então podemos alocar objetos em variaveis do tipo objeto ex

Objeto coisa = new Objeto();

Objeto algumaCoisa = coisa;

Sendo que temos que especificar qual o objeto, se for uma Faca então falamos que algumaCoisa é um objeto do tipo faca!